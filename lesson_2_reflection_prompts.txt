What happens when you initialize a repository? Why do you need to do it?
  I get the message:
  Initialized empty Git repository in C:/Users/Mitchell/reflections/.git/

  This needs to be done to initialize your new repository, so store and provide
  documentation for your project.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
  The staging area are files from the working directory that contain you new
  changes and are ready to be committed.  The working directory contains the
  original version of your working file.  The value is that it helps you to see
  if any changes were made and allows you the opportunity to move forward or
  fall back with your project.

How can you use the staging area to make sure you have one commit per logical
change?
  You can use the git diff to see if there are any changes in the working directory
  and staging area.  You can use the git diff --staged to see the differences
  between the staging area and the last commit.  When you do these commands
  and you can see the changes made and ensure you only have one change between
  commits.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
  It would great if you wanted to make an experimental change.  If you had a
  branch then you could work on the experimental change and not interfere with
  a good known working copy of the file.

How do the diagrams help you visualize the branch structure?
  you can visually see the flow of an entire branch and see if there are any
  unreachable commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
  The result is a combination of both branches along with the commits from
  each individual branch which those commits listed in order by time stamp.
  It is represent this way so you can see all the changes and that the branch(s)
  are merged back into the master.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
  If the merge can be done without any conflict then git will do it automaticallym
  otherwise it will point out the unresolved differences and then let the
  experts decide on how to proceed.
